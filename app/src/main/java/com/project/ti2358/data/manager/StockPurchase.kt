package com.project.ti2358.data.manager

import com.project.ti2358.data.common.BasePosition
import com.project.ti2358.data.common.BrokerType
import com.project.ti2358.service.PurchaseStatus
import com.project.ti2358.service.Utils
import kotlinx.coroutines.Job
import org.koin.core.component.KoinApiExtension
import org.koin.core.component.KoinComponent
import java.util.*

/// TODO: !!!!! –†–∞–∑–ª–∏—á–∏—è StockPurchaseTinkoff –∏ StockPurchaseAlor —Ç–æ–ª—å–∫–æ –≤ —Å–ø–æ—Å–æ–±–∞—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—è–≤–∫–∏, –≤ –±—É–¥—É—â–µ–º –Ω—É–∂–Ω–æ –∏—Ö –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å
@KoinApiExtension
open class StockPurchase(open var stock: Stock, open var broker: BrokerType) : KoinComponent {
    open lateinit var ticker: String
    open lateinit var figi: String

    var position: BasePosition? = null

    var tazikPrice: Double = 0.0                      // –æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞–µ–º —Ç–∞–∑—ã
    var tazikEndlessPrice: Double = 0.0               // –æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–∞–∑—ã
    var zontikEndlessPrice: Double = 0.0              // –æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–æ–Ω—Ç—ã

    var fixedPrice: Double = 0.0                      // –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —à–∞–≥–∞–µ–º –ª–∏–º–∏—Ç–∫–∞–º–∏
    var percentLimitPriceChange: Double = 0.0         // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ % —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–º–∏—Ç–∫–∏
    var absoluteLimitPriceChange: Double = 0.0        // –µ—Å–ª–∏ –ª–∏–º–∏—Ç–∫–∞, —Ç–æ –ø–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ
    var lots: Int = 0                                 // —Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —Ç–∞—Ä–∏–º / –ø—Ä–æ–¥–∞—ë–º
    var profitPercent: Double = 0.0                   // –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ –ª–æ–Ω–≥/—à–æ—Ä—Ç (> 0.0)

    var status: PurchaseStatus = PurchaseStatus.NONE

    // –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏/–æ—Ç–∫—É–ø–∞ –ª–µ—Å–µ–Ω–∫–æ–π –≤ 2225 –∏ 2258 –∏ DayLOW
    var percentProfitSellFrom: Double = 0.0
    var percentProfitSellTo: Double = 0.0

    var currentTrailingStop: TrailingStop? = null
    var trailingStop: Boolean = false
    var trailingStopTakeProfitPercentActivation: Double = 0.0
    var trailingStopTakeProfitPercentDelta: Double = 0.0
    var trailingStopStopLossPercent: Double = 0.0

    companion object {
        const val DelaySuperFast: Long = 75
        const val DelayFast: Long = 150
        const val DelayMiddle: Long = 400
        const val DelayLong: Long = 2000
    }

    open fun buyLimitFromBid(price: Double, profit: Double, counter: Int, orderLifeTimeSeconds: Int): Job? { return null }
    open fun sellLimitFromAsk(price: Double, profit: Double, counter: Int, orderLifeTimeSeconds: Int): Job? { return null }
    open fun buyFromAsk1728(): Job? { return null }
    open fun buyFromAsk2358(): Job? { return null }
    open fun sellWithLimit(): Job? { return null }
    open fun sellToBestBid(): Job? { return null }
    open fun sellToBestAsk(): Job? { return null }
    open fun sellWithTrailing(): Job? { return null }
    open fun sellShortToBid2225(): Job? { return null }

    fun getPriceString(): String {
        return "%.1f$".format(locale = Locale.US, fixedPrice * lots)
    }

    fun getStatusString(): String =
        when (status) {
            PurchaseStatus.NONE -> "NONE"
            PurchaseStatus.WAITING -> "‚è≥"
            PurchaseStatus.ORDER_BUY_PREPARE -> "–æ—Ä–¥–µ—Ä: –¥–æ –ø–æ–∫—É–ø–∫–∏"
            PurchaseStatus.ORDER_BUY -> "–æ—Ä–¥–µ—Ä: –ø–æ–∫—É–ø–∫–∞!"
            PurchaseStatus.BOUGHT -> "–∫—É–ø–ª–µ–Ω–æ! üí∏"
            PurchaseStatus.ORDER_SELL_TRAILING -> "–¢–¢ üìà"
            PurchaseStatus.ORDER_SELL_PREPARE -> "–æ—Ä–¥–µ—Ä: –¥–æ –ø—Ä–æ–¥–∞–∂–∏"
            PurchaseStatus.ORDER_SELL -> "–æ—Ä–¥–µ—Ä: –ø—Ä–æ–¥–∞–∂–∞!"
            PurchaseStatus.SOLD -> "–ø—Ä–æ–¥–∞–Ω–æ! ü§ë"
            PurchaseStatus.CANCELED -> "–æ—Ç–º–µ–Ω–µ–Ω–∞! üõë"
            PurchaseStatus.PART_FILLED -> "—á–∞—Å—Ç–∏—á–Ω–æ –Ω–∞–ª–∏–ª–∏, –ø—Ä–æ–¥–∞—ë–º"
            PurchaseStatus.ERROR_NEED_WATCH -> "–æ—à–∏–±–∫–∞, –¥–∞–ª—å—à–µ —Ä—É–∫–∞–º–∏ ü§∑‚Äç"
        }

    fun getLimitPriceDouble(): Double {
        val buyPrice = fixedPrice + absoluteLimitPriceChange
        return Utils.makeNicePrice(buyPrice, stock)
    }

    fun addLots(lot: Int) {
        lots += lot
        if (lots < 1) lots = 1

        position?.let {
            if (lots > it.getLots() && stock.short == null) { // –µ—Å–ª–∏ –±—É–º–∞–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —à–æ—Ä—Ç, —Ç–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ª–æ—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–∑–∏—Ü–∏–∏
                lots = it.getLots()
            }
        }
    }

    fun addPriceLimitPercent(change: Double) {
        percentLimitPriceChange += change
        updateAbsolutePrice()
    }

    fun updateAbsolutePrice() {
        fixedPrice = stock.getPriceNow()
        absoluteLimitPriceChange = fixedPrice / 100 * percentLimitPriceChange
        absoluteLimitPriceChange = Utils.makeNicePrice(absoluteLimitPriceChange, stock)
    }

    fun addPriceProfit2358Percent(change: Double) {
        percentProfitSellFrom += change
        percentProfitSellTo += change
    }

    fun addPriceProfit2358TrailingTakeProfit(change: Double) {
        trailingStopTakeProfitPercentActivation += change
        trailingStopTakeProfitPercentDelta += change * 0.4
    }

    fun getProfitPriceForSell(): Double {
        position?.let { // –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∞, –±–µ—Ä—ë–º —Å—Ä–µ–¥–Ω—é—é
            val avg = it.getAveragePrice()
            val priceProfit = avg + avg / 100.0 * percentProfitSellFrom
            return Utils.makeNicePrice(priceProfit, stock)
        }

        // –∏–Ω–∞—á–µ –±–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –±—É–º–∞–≥–∏
        val priceProfit = stock.getPriceNow() + stock.getPriceNow() / 100.0 * percentProfitSellFrom
        return Utils.makeNicePrice(priceProfit, stock)
    }

    fun processInitialProfit() {
        percentLimitPriceChange = SettingsManager.get1000SellTakeProfit()

        position?.let {
            // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∑—è—Ç—å –ø—Ä–æ—Ñ–∏—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            var futureProfit = SettingsManager.get1000SellTakeProfit()

            // –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —Ç–æ 1% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (futureProfit == 0.0) futureProfit = 1.0

            // –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç —É–∂–µ –±–æ–ª—å—à–µ, —Ç–æ –∑–∞ –±–∞–∑–æ–≤—ã–π –≤–∑—è—Ç—å –µ–≥–æ
            val currentProfit = it.getProfitPercent()

            percentLimitPriceChange = if (currentProfit > futureProfit) currentProfit else futureProfit
        }
        status = PurchaseStatus.WAITING
    }
}
