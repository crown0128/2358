package com.project.ti2358.data.manager

import com.project.ti2358.data.model.dto.*
import com.project.ti2358.data.service.*
import com.project.ti2358.service.Utils
import kotlinx.coroutines.*
import org.koin.core.component.KoinApiExtension
import org.koin.core.component.KoinComponent
import org.koin.core.component.inject
import java.util.*
import kotlin.math.abs
import kotlin.math.ceil

enum class PurchaseStatus {
    NONE,
    ORDER_BUY_PREPARE,
    ORDER_BUY,
    BOUGHT,
    ORDER_SELL_TRAILING,
    ORDER_SELL_PREPARE,
    ORDER_SELL,
    WAITING,
    SOLD,
    CANCELED,
    PART_FILLED,

    ERROR_NEED_WATCH,
}

@KoinApiExtension
data class PurchaseStock(var stock: Stock) : KoinComponent {
    private val ordersService: OrdersService by inject()
    private val depositManager: DepositManager by inject()
    private val marketService: MarketService by inject()
    private val strategyTrailingStop: StrategyTrailingStop by inject()

    var ticker = stock.ticker
    var figi = stock.figi

    var position: PortfolioPosition? = null

    var tazikEndlessPrice: Double = 0.0               // –æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–∞–∑—ã
    var zontikEndlessPrice: Double = 0.0               // –æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–æ–Ω—Ç—ã

    var fixedPrice: Double = 0.0                      // –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —à–∞–≥–∞–µ–º –ª–∏–º–∏—Ç–∫–∞–º–∏
    var percentLimitPriceChange: Double = 0.0         // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ % —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–º–∏—Ç–∫–∏
    var absoluteLimitPriceChange: Double = 0.0        // –µ—Å–ª–∏ –ª–∏–º–∏—Ç–∫–∞, —Ç–æ –ø–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ

    var lots: Int = 0                                 // —Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —Ç–∞—Ä–∏–º / –ø—Ä–æ–¥–∞—ë–º
    var status: PurchaseStatus = PurchaseStatus.NONE

    var buyMarketOrder: MarketOrder? = null
    var buyLimitOrder: LimitOrder? = null
    var sellLimitOrder: LimitOrder? = null

    var percentProfitSellFrom: Double = 0.0
    var percentProfitSellTo: Double = 0.0

    var currentTrailingStop: TrailingStop? = null
    var trailingStop: Boolean = false
    var trailingStopTakeProfitPercentActivation: Double = 0.0
    var trailingStopTakeProfitPercentDelta: Double = 0.0
    var trailingStopStopLossPercent: Double = 0.0

    companion object {
        const val DelaySuperFast: Long = 75
        const val DelayFast: Long = 150
        const val DelayMiddle: Long = 400
        const val DelayLong: Long = 2000
    }

    fun getPriceString(): String {
        return "%.1f$".format(locale = Locale.US, fixedPrice * lots)
    }

    fun getStatusString(): String =
        when (status) {
            PurchaseStatus.NONE -> "NONE"
            PurchaseStatus.WAITING -> "‚è≥"
            PurchaseStatus.ORDER_BUY_PREPARE -> "–æ—Ä–¥–µ—Ä: –¥–æ –ø–æ–∫—É–ø–∫–∏"
            PurchaseStatus.ORDER_BUY -> "–æ—Ä–¥–µ—Ä: –ø–æ–∫—É–ø–∫–∞!"
            PurchaseStatus.BOUGHT -> "–∫—É–ø–ª–µ–Ω–æ! üí∏"
            PurchaseStatus.ORDER_SELL_TRAILING -> "–¢–¢ üìà"
            PurchaseStatus.ORDER_SELL_PREPARE -> "–æ—Ä–¥–µ—Ä: –¥–æ –ø—Ä–æ–¥–∞–∂–∏"
            PurchaseStatus.ORDER_SELL -> "–æ—Ä–¥–µ—Ä: –ø—Ä–æ–¥–∞–∂–∞!"
            PurchaseStatus.SOLD -> "–ø—Ä–æ–¥–∞–Ω–æ! ü§ë"
            PurchaseStatus.CANCELED -> "–æ—Ç–º–µ–Ω–µ–Ω–∞! üõë"
            PurchaseStatus.PART_FILLED -> "—á–∞—Å—Ç–∏—á–Ω–æ –Ω–∞–ª–∏–ª–∏, –ø—Ä–æ–¥–∞—ë–º"
            PurchaseStatus.ERROR_NEED_WATCH -> "–æ—à–∏–±–∫–∞, –¥–∞–ª—å—à–µ —Ä—É–∫–∞–º–∏ ü§∑‚Äç"
        }

    fun getLimitPriceDouble(): Double {
        val buyPrice = fixedPrice + absoluteLimitPriceChange
        return Utils.makeNicePrice(buyPrice, stock)
    }

    fun addLots(lot: Int) {
        lots += lot
        if (lots < 1) lots = 1

        position?.let {
            if (lots > it.lots && stock.short == null) { // –µ—Å–ª–∏ –±—É–º–∞–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —à–æ—Ä—Ç, —Ç–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ª–æ—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–∑–∏—Ü–∏–∏
                lots = it.lots
            }
        }
    }

    fun addPriceLimitPercent(change: Double) {
        percentLimitPriceChange += change
        updateAbsolutePrice()
    }

    fun updateAbsolutePrice() {
        fixedPrice = stock.getPriceNow()
        absoluteLimitPriceChange = fixedPrice / 100 * percentLimitPriceChange
        absoluteLimitPriceChange = Utils.makeNicePrice(absoluteLimitPriceChange, stock)
    }

    fun addPriceProfit2358Percent(change: Double) {
        percentProfitSellFrom += change
        percentProfitSellTo += change
    }

    fun addPriceProfit2358TrailingTakeProfit(change: Double) {
        trailingStopTakeProfitPercentActivation += change
        trailingStopTakeProfitPercentDelta += change * 0.4
    }

    fun buyMarket(price: Double): Job? {
        if (lots == 0) return null

        val sellPrice = Utils.makeNicePrice(price, stock)

        return GlobalScope.launch(Dispatchers.Main) {
            try {
                while (true) {
                    try {
                        status = PurchaseStatus.ORDER_BUY_PREPARE
                        buyMarketOrder = ordersService.placeMarketOrder(
                            lots,
                            stock.figi,
                            OperationType.BUY,
                            depositManager.getActiveBrokerAccountId()
                        )
                        status = PurchaseStatus.ORDER_BUY
                        break
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                    delay(DelayFast)
                }

                // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Ç–∏–∫–µ—Ä
                var position: PortfolioPosition? = null
                var counter = 50
                while (counter > 0) {
                    depositManager.refreshDeposit()

                    position = depositManager.getPositionForFigi(stock.figi)
                    if (position != null && position.lots >= lots) { // –∫—É–ø–ª–µ–Ω–æ!
                        status = PurchaseStatus.BOUGHT
                        break
                    }

                    delay(DelayLong)
                    counter--
                }

                if (sellPrice == 0.0) return@launch

                // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                try {
                    status = PurchaseStatus.ORDER_SELL_PREPARE
                    position?.let {
                        sellLimitOrder = ordersService.placeLimitOrder(
                            it.lots,
                            stock.figi,
                            sellPrice,
                            OperationType.SELL,
                            depositManager.getActiveBrokerAccountId()
                        )
                    }
                    status = PurchaseStatus.ORDER_SELL
                } catch (e: Exception) {
                    e.printStackTrace()
                }
                delay(DelayFast)

                while (true) {
                    delay(DelayLong)

                    position = depositManager.getPositionForFigi(stock.figi)
                    if (position == null) { // –ø—Ä–æ–¥–∞–Ω–æ!
                        status = PurchaseStatus.SOLD
                        break
                    }
                }

            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }

    fun buyLimitFromBid(price: Double, profit: Double, counter: Int, orderLifeTimeSeconds: Int): Job? {
        if (lots > 999999999 || lots == 0 || price == 0.0) return null
        val buyPrice = Utils.makeNicePrice(price, stock)

        var profitPrice = buyPrice + buyPrice / 100.0 * profit
        profitPrice = Utils.makeNicePrice(profitPrice, stock)

        val p = depositManager.getPositionForFigi(figi)

        val lotsPortfolio = p?.lots ?: 0
        var lotsToBuy = lots

        status = PurchaseStatus.WAITING
        return GlobalScope.launch(Dispatchers.Main) {
            try {
                val figi = stock.figi
                val ticker = stock.ticker

                // —Å—á—ë—Ç—á–∏–∫ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –¥–µ–ø–æ) = –ø—Ä–∏–º–µ—Ä–Ω–æ 1 –º–∏–Ω—É—Ç—É
                var tries = counter
                while (tries >= 0) { // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
                    try {
                        status = PurchaseStatus.ORDER_BUY_PREPARE
                        buyLimitOrder = ordersService.placeLimitOrder(
                            lotsToBuy,
                            figi,
                            buyPrice,
                            OperationType.BUY,
                            depositManager.getActiveBrokerAccountId()
                        )
                        delay(DelayFast)

                        if (buyLimitOrder!!.status == OrderStatus.NEW || buyLimitOrder!!.status == OrderStatus.PENDING_NEW) {
                            status = PurchaseStatus.ORDER_BUY
                            break
                        }

                        depositManager.refreshOrders()
                        depositManager.refreshDeposit()

                        // –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ—Ä–¥–µ—Ä–∞, –Ω–∏ –ø–æ–∑–∏—Ü–∏–∏, –∑–Ω–∞—á–∏—Ç —á–µ—Ç–∞ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä—è–µ–º
                        if (depositManager.getOrderAllOrdersForFigi(figi, OperationType.BUY).isNotEmpty()) {
                            status = PurchaseStatus.ORDER_BUY
                            break
                        }
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                    delay(DelaySuperFast)
                    tries--
                }
                if (tries < 0) { // –∑–∞—è–≤–∫–∞ –Ω–µ –≤—ã—Å—Ç–∞–≤–∏–ª–∞—Å—å, —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ª–∞–≤–æ—á–∫—É, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ–¥–∏–Ω —Ç–∞–∑
                    Utils.showToastAlert("$ticker: –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ $buyPrice")
                    status = PurchaseStatus.CANCELED
                    return@launch
                }

                Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ $buyPrice")

                if (profit == 0.0) {
                    delay(orderLifeTimeSeconds * 1000L)
                    status = PurchaseStatus.CANCELED
                    try {
                        buyLimitOrder?.let {
                            ordersService.cancel(it.orderId, depositManager.getActiveBrokerAccountId())
                        }
                    } catch (e: Exception) {

                    }
                } else {
                    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Ç–∏–∫–µ—Ä
                    var position: PortfolioPosition?
                    var iterations = 0

                    while (true) {
                        iterations++
                        try {
                            depositManager.refreshDeposit()
                            depositManager.refreshOrders()
                        } catch (e: Exception) {
                            e.printStackTrace()
                            delay(DelayLong)
                            continue
                        }

                        if (iterations * DelayLong / 1000.0 > orderLifeTimeSeconds) { // –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É
                            status = PurchaseStatus.CANCELED
                            buyLimitOrder?.let {
                                ordersService.cancel(it.orderId, depositManager.getActiveBrokerAccountId())
                            }
                            Utils.showToastAlert("$ticker: –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ $buyPrice")
                            return@launch
                        }

                        val orderBuy = depositManager.getOrderForFigi(figi, OperationType.BUY)
                        position = depositManager.getPositionForFigi(figi)

                        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
                        val orders = depositManager.getOrderAllOrdersForFigi(figi, OperationType.SELL)
                        var totalSellingLots = 0
                        orders.forEach { totalSellingLots += it.requestedLots }
                        if (totalSellingLots >= lots) break

                        // –∑–∞—è–≤–∫–∞ —Å—Ç–æ–∏—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ
                        if (orderBuy != null && position == null) {
                            status = PurchaseStatus.ORDER_BUY
                            delay(DelayLong)
                            continue
                        }

                        if (orderBuy == null && position == null) { // –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ
                            status = PurchaseStatus.CANCELED
                            Utils.showToastAlert("$ticker: –Ω–µ –Ω–∞–ª–∏–ª–∏ –ø–æ $buyPrice")
                            return@launch
                        }

                        position?.let { // –ø–æ—è–≤–∏–ª–∞—Å—å –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —á—Ç–æ –ø—Ä–æ–¥–∞—Ç—å
                            // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                            try {
                                val lotsToSell = it.lots - it.blocked.toInt() - lotsPortfolio
                                if (lotsToSell <= 0) {  // –µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ª–æ—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                                    return@let
                                }

                                lotsToBuy -= lotsToSell
                                if (lotsToBuy < 0) {    // –µ—Å–ª–∏ –≤—Å—è –∫—É–ø–ª–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                                    return@let
                                }

                                Utils.showToastAlert("$ticker: –∫—É–ø–ª–µ–Ω–æ –ø–æ $buyPrice")

                                sellLimitOrder = ordersService.placeLimitOrder(
                                    lotsToSell,
                                    figi,
                                    profitPrice,
                                    OperationType.SELL,
                                    depositManager.getActiveBrokerAccountId()
                                )

                                if (sellLimitOrder!!.status == OrderStatus.NEW || sellLimitOrder!!.status == OrderStatus.PENDING_NEW) {
                                    status = PurchaseStatus.ORDER_SELL
                                    Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ $profitPrice")
                                } else { // –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –≤–µ—Ä–Ω—É—Ç—å –ª–æ—Ç—ã
                                    lotsToBuy += lotsToSell
                                }

                            } catch (e: Exception) {
                                e.printStackTrace()
                            }
                        }

                        if (orderBuy == null) { // –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å—á–µ–∑ - —É–¥–∞–ª—ë–Ω –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –≤–µ—Å—å –∑–∞–ø–æ–ª–Ω–∏–ª—Å—è - –∑–∞–≤–µ—Ä—à–∞–µ–º
                            status = PurchaseStatus.ORDER_SELL
                            break
                        }

                        delay(DelayLong)
                    }
                }

                if (status == PurchaseStatus.ORDER_SELL) {
                    while (true) {
                        delay(DelayLong)
                        val position = depositManager.getPositionForFigi(figi)
                        if (position == null || position.lots == lotsPortfolio) { // –ø—Ä–æ–¥–∞–Ω–æ!
                            status = PurchaseStatus.SOLD
                            Utils.showToastAlert("$ticker: –ø—Ä–æ–¥–∞–Ω–æ!?")
                            break
                        }
                    }
                }

            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }

    fun sellLimitFromAsk(price: Double, profit: Double, counter: Int, orderLifeTimeSeconds: Int): Job? {
        if (lots > 999999999 || lots == 0 || price == 0.0) return null
        val sellPrice = Utils.makeNicePrice(price, stock)

        var profitPrice = sellPrice - sellPrice / 100.0 * profit
        profitPrice = Utils.makeNicePrice(profitPrice, stock)

        val p = depositManager.getPositionForFigi(figi)

        val lotsPortfolio = abs(p?.lots ?: 0)
        var lotsToSell = lots

        status = PurchaseStatus.WAITING
        return GlobalScope.launch(Dispatchers.Main) {
            try {
                val figi = stock.figi
                val ticker = stock.ticker

                // —Å—á—ë—Ç—á–∏–∫ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –¥–µ–ø–æ) = –ø—Ä–∏–º–µ—Ä–Ω–æ 1 –º–∏–Ω—É—Ç—É
                var tries = counter
                while (tries >= 0) { // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
                    try {
                        status = PurchaseStatus.ORDER_BUY_PREPARE
                        sellLimitOrder = ordersService.placeLimitOrder(
                            lotsToSell,
                            figi,
                            sellPrice,
                            OperationType.SELL,
                            depositManager.getActiveBrokerAccountId()
                        )
                        delay(DelayFast)

                        if (sellLimitOrder!!.status == OrderStatus.NEW || sellLimitOrder!!.status == OrderStatus.PENDING_NEW) {
                            status = PurchaseStatus.ORDER_SELL
                            break
                        }

                        depositManager.refreshOrders()
                        depositManager.refreshDeposit()

                        // –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ—Ä–¥–µ—Ä–∞, –Ω–∏ –ø–æ–∑–∏—Ü–∏–∏, –∑–Ω–∞—á–∏—Ç —á–µ—Ç–∞ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä—è–µ–º
                        if (depositManager.getOrderAllOrdersForFigi(figi, OperationType.SELL).isNotEmpty()) {
                            status = PurchaseStatus.ORDER_SELL
                            break
                        }
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                    delay(DelaySuperFast)
                    tries--
                }
                if (tries < 0) { // –∑–∞—è–≤–∫–∞ –Ω–µ –≤—ã—Å—Ç–∞–≤–∏–ª–∞—Å—å, —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ª–∞–≤–æ—á–∫—É, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ–¥–∏–Ω —Ç–∞–∑
                    Utils.showToastAlert("$ticker: –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ —à–æ—Ä—Ç –ø–æ $sellPrice")
                    status = PurchaseStatus.CANCELED
                    return@launch
                }

                Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ —à–æ—Ä—Ç –ø–æ $sellPrice")

                if (profit == 0.0) {
                    delay(orderLifeTimeSeconds * 1000L)
                    status = PurchaseStatus.CANCELED
                    try {
                        sellLimitOrder?.let {
                            ordersService.cancel(it.orderId, depositManager.getActiveBrokerAccountId())
                        }
                    } catch (e: Exception) {

                    }
                } else {
                    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Ç–∏–∫–µ—Ä
                    var position: PortfolioPosition?
                    var iterations = 0

                    while (true) {
                        iterations++
                        try {
                            depositManager.refreshDeposit()
                            depositManager.refreshOrders()
                        } catch (e: Exception) {
                            e.printStackTrace()
                            delay(DelayLong)
                            continue
                        }

                        if (iterations * DelayLong / 1000.0 > orderLifeTimeSeconds) { // –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É
                            status = PurchaseStatus.CANCELED
                            sellLimitOrder?.let {
                                ordersService.cancel(it.orderId, depositManager.getActiveBrokerAccountId())
                            }
                            Utils.showToastAlert("$ticker: –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ $sellPrice")
                            return@launch
                        }

                        val orderSell = depositManager.getOrderForFigi(figi, OperationType.SELL)
                        position = depositManager.getPositionForFigi(figi)

                        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
                        val orders = depositManager.getOrderAllOrdersForFigi(figi, OperationType.BUY)
                        var totalBuyingLots = 0
                        orders.forEach { totalBuyingLots += it.requestedLots }
                        if (totalBuyingLots >= lots) break

                        // –∑–∞—è–≤–∫–∞ —Å—Ç–æ–∏—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ
                        if (orderSell != null && position == null) {
                            status = PurchaseStatus.ORDER_SELL
                            delay(DelayLong)
                            continue
                        }

                        if (orderSell == null && position == null) { // –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ
                            status = PurchaseStatus.CANCELED
                            Utils.showToastAlert("$ticker: –Ω–µ –Ω–∞–ª–∏–ª–∏ –ø–æ $sellPrice")
                            return@launch
                        }

                        position?.let { // –ø–æ—è–≤–∏–ª–∞—Å—å –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —á—Ç–æ –ø—Ä–æ–¥–∞—Ç—å
                            // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                            try {
                                val lotsToBuy = it.lots - it.blocked.toInt() - lotsPortfolio
                                if (lotsToBuy <= 0) {  // –µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ª–æ—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                                    return@let
                                }

                                lotsToSell -= lotsToBuy
                                if (lotsToSell < 0) {    // –µ—Å–ª–∏ –≤—Å—è –∫—É–ø–ª–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                                    return@let
                                }

                                Utils.showToastAlert("$ticker: –∫—É–ø–ª–µ–Ω–æ –ø–æ $sellPrice")

                                buyLimitOrder = ordersService.placeLimitOrder(
                                    lotsToSell,
                                    figi,
                                    profitPrice,
                                    OperationType.BUY,
                                    depositManager.getActiveBrokerAccountId()
                                )

                                if (buyLimitOrder!!.status == OrderStatus.NEW || buyLimitOrder!!.status == OrderStatus.PENDING_NEW) {
                                    status = PurchaseStatus.ORDER_BUY
                                    Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Ç–∫—É–ø —à–æ—Ä—Ç–∞ –ø–æ $profitPrice")
                                } else { // –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –≤–µ—Ä–Ω—É—Ç—å –ª–æ—Ç—ã
                                    lotsToSell += lotsToBuy
                                }

                            } catch (e: Exception) {
                                e.printStackTrace()
                            }
                        }

                        if (orderSell == null) { // –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å—á–µ–∑ - —É–¥–∞–ª—ë–Ω –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –≤–µ—Å—å –∑–∞–ø–æ–ª–Ω–∏–ª—Å—è - –∑–∞–≤–µ—Ä—à–∞–µ–º
                            status = PurchaseStatus.ORDER_BUY
                            break
                        }

                        delay(DelayLong)
                    }
                }

                if (status == PurchaseStatus.ORDER_BUY) {
                    while (true) {
                        delay(DelayLong)
                        val position = depositManager.getPositionForFigi(figi)
                        if (position == null || position.lots == lotsPortfolio) { // –ø—Ä–æ–¥–∞–Ω–æ!
                            status = PurchaseStatus.SOLD
                            Utils.showToastAlert("$ticker: –ø—Ä–æ–¥–∞–Ω–æ!?")
                            break
                        }
                    }
                }

            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }

    fun buyFromAsk1728(): Job? {
        if (lots == 0) return null

        return GlobalScope.launch(StockManager.stockContext) {
            try {
                val ticker = stock.ticker
                val figi = stock.figi

                var buyPrice: Double = 0.0
                try {
                    status = PurchaseStatus.ORDER_BUY_PREPARE

                    val orderbook = marketService.orderbook(figi, 10)
                    buyPrice = orderbook.getBestPriceFromAsk(lots)
                    if (buyPrice == 0.0) return@launch

                    buyLimitOrder = ordersService.placeLimitOrder(
                        lots,
                        figi,
                        buyPrice,
                        OperationType.BUY,
                        depositManager.getActiveBrokerAccountId()
                    )
                    status = PurchaseStatus.ORDER_BUY
                } catch (e: Exception) {
                    e.printStackTrace()
                    Utils.showToastAlert("$ticker: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ —Ü–µ–Ω–µ $buyPrice")
                    return@launch
                }

                Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ $buyPrice")

                delay(DelayFast)

                // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Ç–∏–∫–µ—Ä
                var position: PortfolioPosition?
                while (true) {
                    try {
                        depositManager.refreshDeposit()
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }

                    position = depositManager.getPositionForFigi(figi)
                    if (position != null && position.lots >= lots) {
                        status = PurchaseStatus.BOUGHT
                        Utils.showToastAlert("$ticker: –∫—É–ø–ª–µ–Ω–æ!")
                        break
                    }

                    delay(DelayLong)
                }

                if (trailingStop) { // –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
                    currentTrailingStop = TrailingStop(stock, buyPrice, trailingStopTakeProfitPercentActivation, trailingStopTakeProfitPercentDelta, trailingStopStopLossPercent)
                    currentTrailingStop?.let {
                        strategyTrailingStop.addTrailingStop(it)
                        status = PurchaseStatus.ORDER_SELL_TRAILING

                        // –≤—Å—è –ª–æ–≥–∏–∫–∞ –¢–° —Ç—É—Ç, –æ—á–µ–Ω—å –¥–æ–ª–≥–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                        var profitSellPrice = it.process()
                        strategyTrailingStop.removeTrailingStop(it)

                        status = PurchaseStatus.ORDER_SELL_PREPARE
                        if (profitSellPrice == 0.0) return@launch

                        // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –≤ –ª—É—á—à–∏–π –±–∏–¥
                        if (SettingsManager.getTrailingStopSellBestBid()) {
                            val orderbook = marketService.orderbook(figi, 5)
                            profitSellPrice = orderbook.getBestPriceFromBid(lots)
                        }

                        if (profitSellPrice == 0.0) return@launch

                        while (true) {
                            try {
                                profitSellPrice = Utils.makeNicePrice(profitSellPrice, stock)
                                sellLimitOrder = ordersService.placeLimitOrder(
                                    lots,
                                    figi,
                                    profitSellPrice,
                                    OperationType.SELL,
                                    depositManager.getActiveBrokerAccountId()
                                )
                                status = PurchaseStatus.ORDER_SELL
                                break
                            } catch (e: Exception) {
                                e.printStackTrace()
                            }
                            delay(DelayMiddle)
                        }
                    }
                } else { // –ª–∏–º–∏—Ç–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                    position?.let {
                        val profit = SettingsManager.get1728TakeProfit()
                        if (profit == 0.0 || buyPrice == 0.0) return@launch
                        var profitPrice = buyPrice + buyPrice / 100.0 * profit
                        profitPrice = Utils.makeNicePrice(profitPrice, stock)

                        // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                        while (true) {
                            try {
                                status = PurchaseStatus.ORDER_SELL_PREPARE
                                sellLimitOrder = ordersService.placeLimitOrder(
                                    lots,
                                    figi,
                                    profitPrice,
                                    OperationType.SELL,
                                    depositManager.getActiveBrokerAccountId()
                                )
                                status = PurchaseStatus.ORDER_SELL
                                break
                            } catch (e: Exception) {
                                e.printStackTrace()
                            }
                            delay(DelayMiddle)
                        }

                        Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ $profitPrice")
                    }
                }

                while (true) {
                    position = depositManager.getPositionForFigi(figi)
                    if (position == null) { // –ø—Ä–æ–¥–∞–Ω–æ!
                        status = PurchaseStatus.SOLD
                        Utils.showToastAlert("$ticker: –ø—Ä–æ–¥–∞–Ω–æ!")
                        break
                    }
                    delay(DelayLong)
                }
            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                currentTrailingStop?.let {
                    strategyTrailingStop.removeTrailingStop(it)
                }
                e.printStackTrace()
            }
        }
    }

    fun buyFromAsk2358(): Job? {
        if (lots == 0) return null

        return GlobalScope.launch(StockManager.stockContext) {
            try {
                val ticker = stock.ticker
                val figi = stock.figi

                var buyPrice: Double = 0.0
                try {
                    status = PurchaseStatus.ORDER_BUY_PREPARE
                    val orderbook = marketService.orderbook(figi, 10)
                    buyPrice = orderbook.getBestPriceFromAsk(lots)
                    if (buyPrice == 0.0) return@launch

                    buyLimitOrder = ordersService.placeLimitOrder(
                        lots,
                        figi,
                        buyPrice,
                        OperationType.BUY,
                        depositManager.getActiveBrokerAccountId()
                    )
                    status = PurchaseStatus.ORDER_BUY
                } catch (e: Exception) {
                    status = PurchaseStatus.CANCELED
                    e.printStackTrace()
                    Utils.showToastAlert("$ticker: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ —Ü–µ–Ω–µ $buyPrice")
                    return@launch
                }

                Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ $buyPrice")
                delay(DelayFast)

                // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Ç–∏–∫–µ—Ä
                var position: PortfolioPosition?
                while (true) {
                    try {
                        depositManager.refreshDeposit()
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }

                    position = depositManager.getPositionForFigi(figi)
                    if (position != null && position.lots >= lots) {
                        status = PurchaseStatus.BOUGHT
                        Utils.showToastAlert("$ticker: –∫—É–ø–ª–µ–Ω–æ!")
                        break
                    }

                    delay(DelayLong)
                }

                if (trailingStop) { // –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
                    currentTrailingStop = TrailingStop(stock, buyPrice, trailingStopTakeProfitPercentActivation, trailingStopTakeProfitPercentDelta, trailingStopStopLossPercent)
                    currentTrailingStop?.let {
                        strategyTrailingStop.addTrailingStop(it)
                        status = PurchaseStatus.ORDER_SELL_TRAILING

                        // –≤—Å—è –ª–æ–≥–∏–∫–∞ –¢–° —Ç—É—Ç, –æ—á–µ–Ω—å –¥–æ–ª–≥–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                        var profitSellPrice = it.process()
                        strategyTrailingStop.removeTrailingStop(it)

                        status = PurchaseStatus.ORDER_SELL_PREPARE
                        if (profitSellPrice == 0.0) return@launch

                        if (SettingsManager.getTrailingStopSellBestBid()) { // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –≤ –ª—É—á—à–∏–π –±–∏–¥
                            val orderbook = marketService.orderbook(figi, 5)
                            profitSellPrice = orderbook.getBestPriceFromBid(lots)
                        }
                        if (profitSellPrice == 0.0) return@launch

                        try {
                            profitSellPrice = Utils.makeNicePrice(profitSellPrice, stock)
                            sellLimitOrder = ordersService.placeLimitOrder(
                                lots,
                                figi,
                                profitSellPrice,
                                OperationType.SELL,
                                depositManager.getActiveBrokerAccountId()
                            )
                            status = PurchaseStatus.ORDER_SELL
                        } catch (e: Exception) {
                            e.printStackTrace()
                            status = PurchaseStatus.ERROR_NEED_WATCH
                        }
                    }
                } else { // –ø—Ä–æ–¥–∞–∂–∞ 2358 –ª–µ—Å–µ–Ω–∫–æ–π
                    position?.let {
                        val totalLots = lots
                        val profitFrom = if (percentProfitSellFrom != 0.0) percentProfitSellFrom else SettingsManager.get2358TakeProfitFrom()
                        val profitTo = if (percentProfitSellTo != 0.0) percentProfitSellTo else SettingsManager.get2358TakeProfitTo()

                        val profitStep = SettingsManager.get2358TakeProfitStep()

                        // –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫–∏
                        if (profitTo < profitFrom || profitStep == 0 || profitFrom == 0.0 || profitTo == 0.0) return@launch

                        val list: MutableList<Pair<Int, Double>> = mutableListOf()
                        when (profitStep) {
                            1 -> { // –µ—Å–ª–∏ —à–∞–≥ 1, —Ç–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∏–∂–Ω–∏–π % –∏ –≤—Å—ë
                                list.add(Pair(totalLots, profitFrom))
                            }
                            2 -> { // –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
                                val partLots1 = totalLots / 2
                                val partLots2 = totalLots - partLots1
                                list.add(Pair(partLots1, profitFrom))
                                list.add(Pair(partLots2, profitTo))
                            }
                            else -> { // –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ
                                val profitStepDouble: Double = profitStep.toDouble()
                                val delta = (profitTo - profitFrom) / (profitStep - 1)

                                // –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–û–ª—å—à—É—é, —á—Ç–æ–±—ã –Ω–∞–ø–æ—Å–ª–µ–¥–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –ª–æ—Ç–æ–≤
                                val basePartLots: Int = ceil(totalLots / profitStepDouble).toInt()

                                var currentLots = basePartLots
                                var currentProfit = profitFrom

                                // —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç
                                list.add(Pair(basePartLots, currentProfit))

                                var step = profitStep - 2
                                while (step > 0) {
                                    if (currentLots + basePartLots > totalLots) {
                                        break
                                    }
                                    currentLots += basePartLots
                                    currentProfit += delta
                                    list.add(Pair(basePartLots, currentProfit))
                                    step--
                                }

                                // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç
                                val lastPartLots = totalLots - currentLots
                                if (lastPartLots > 0) {
                                    list.add(Pair(lastPartLots, profitTo))
                                }
                            }
                        }

                        if (list.isEmpty()) return@launch

                        status = PurchaseStatus.ORDER_SELL_PREPARE
                        for (p in list) {
                            val lotsStep = p.first
                            val profit = p.second

                            // –≤—ã—á–∏—Å–ª—è–µ–º –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                            var profitPrice = buyPrice + buyPrice / 100.0 * profit
                            profitPrice = Utils.makeNicePrice(profitPrice, stock)

                            if (lotsStep <= 0 || profitPrice == 0.0) continue

                            // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                            try {
                                sellLimitOrder = ordersService.placeLimitOrder(
                                    lotsStep,
                                    figi,
                                    profitPrice,
                                    OperationType.SELL,
                                    depositManager.getActiveBrokerAccountId()
                                )
                                status = PurchaseStatus.ORDER_SELL
                            } catch (e: Exception) {
                                status = PurchaseStatus.ERROR_NEED_WATCH
                                e.printStackTrace()
                            }
                            delay(DelayFast)
                        }
                        Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –æ—Ç $percentProfitSellFrom% –¥–æ $percentProfitSellTo%")
                    }
                }

                while (true) {
                    delay(DelayLong * 5)
                    if (depositManager.getPositionForFigi(figi) == null) { // –ø—Ä–æ–¥–∞–Ω–æ!
                        status = PurchaseStatus.SOLD
                        Utils.showToastAlert("$ticker: –ø—Ä–æ–¥–∞–Ω–æ!")
                        break
                    }
                }
            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                currentTrailingStop?.let {
                    strategyTrailingStop.removeTrailingStop(it)
                }
                e.printStackTrace()
            }
        }
    }

    fun sellMorning(): Job? {
        val figi = stock.figi
        val pos = depositManager.getPositionForFigi(figi)
        if (lots == 0 || percentProfitSellFrom == 0.0) {
            status = PurchaseStatus.CANCELED
            return null
        }

        return GlobalScope.launch(Dispatchers.Main) {
            try {
                position = pos
                val short = position == null
                val ticker = stock.ticker

                val profitPrice = getProfitPriceForSell()
                if (profitPrice == 0.0) return@launch

                var counter = 50
                while (counter > 0) {
                    try {
                        // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                        status = PurchaseStatus.ORDER_SELL_PREPARE
                        sellLimitOrder = ordersService.placeLimitOrder(
                            lots,
                            figi,
                            profitPrice,
                            OperationType.SELL,
                            depositManager.getActiveBrokerAccountId()
                        )
                        delay(DelayFast)

                        if (sellLimitOrder!!.status == OrderStatus.NEW || sellLimitOrder!!.status == OrderStatus.PENDING_NEW) {
                            status = PurchaseStatus.ORDER_SELL
                            break
                        }

                        depositManager.refreshOrders()
                        if (depositManager.getOrderAllOrdersForFigi(figi, OperationType.SELL).isEmpty()) continue

                        status = PurchaseStatus.ORDER_SELL
                        Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ $profitPrice")
                        break
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                    counter--
                    delay(DelaySuperFast)
                }

                // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–∞–ª–æ—Å—å –∏–ª–∏ –Ω–µ—Ç
                while (true) {
                    delay(DelayLong + DelayLong)
                    val p = depositManager.getPositionForFigi(figi)
                    if (!short) {
                        if (p == null || p.lots == 0) { // –ø—Ä–æ–¥–∞–Ω–æ
                            status = PurchaseStatus.SOLD
                            break
                        }
                    } else {
                        if (p != null && p.lots < 0) { // —à–æ—Ä—Ç
                            status = PurchaseStatus.SOLD
                            break
                        }
                    }
                }
            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }

    fun sellWithLimit(): Job? {
        val figi = stock.figi
        val ticker = stock.ticker
        val pos = depositManager.getPositionForFigi(figi)
        if (pos == null || lots == 0 || percentProfitSellFrom == 0.0) {
            status = PurchaseStatus.CANCELED
            return null
        }

        return GlobalScope.launch(Dispatchers.Main) {
            try {
                position = pos

                val profitPrice = getProfitPriceForSell()
                if (profitPrice == 0.0) return@launch

                try { // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                    status = PurchaseStatus.ORDER_SELL_PREPARE
                    sellLimitOrder = ordersService.placeLimitOrder(
                        lots,
                        figi,
                        profitPrice,
                        OperationType.SELL,
                        depositManager.getActiveBrokerAccountId()
                    )
                } catch (e: Exception) {
                    e.printStackTrace()
                }
                status = PurchaseStatus.ORDER_SELL
                Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ $profitPrice")
            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }

    fun sellToBestBid(): Job? {
        val figi = stock.figi
        val ticker = stock.ticker

        val pos = depositManager.getPositionForFigi(figi)
        if (pos == null || pos.lots == 0) {
            status = PurchaseStatus.CANCELED
            return null
        }

        return GlobalScope.launch(Dispatchers.Main) {
            try {
                position = pos
                status = PurchaseStatus.ORDER_SELL_PREPARE

                val orderbook = marketService.orderbook(figi, 5)
                val bestBid = orderbook.getBestPriceFromBid(lots)
                val profitSellPrice = Utils.makeNicePrice(bestBid, stock)

                try { // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                    sellLimitOrder = ordersService.placeLimitOrder(
                        lots,
                        figi,
                        profitSellPrice,
                        OperationType.SELL,
                        depositManager.getActiveBrokerAccountId()
                    )
                } catch (e: Exception) {
                    status = PurchaseStatus.CANCELED
                    e.printStackTrace()
                    return@launch
                }

                Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ $profitSellPrice")
                status = PurchaseStatus.ORDER_SELL
            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }

    fun sellToBestAsk(): Job? {
        val figi = stock.figi
        val pos = depositManager.getPositionForFigi(figi)
        if (pos == null || pos.lots == 0) {
            status = PurchaseStatus.CANCELED
            return null
        }

        return GlobalScope.launch(Dispatchers.Main) {
            try {
                position = pos
                status = PurchaseStatus.ORDER_SELL_PREPARE
                val ticker = pos.stock?.ticker

                val orderbook = marketService.orderbook(figi, 10)
                val bestAsk = orderbook.getBestPriceFromAsk(lots)
                val profitSellPrice = Utils.makeNicePrice(bestAsk, stock)

                try { // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                    sellLimitOrder = ordersService.placeLimitOrder(
                        lots,
                        figi,
                        profitSellPrice,
                        OperationType.SELL,
                        depositManager.getActiveBrokerAccountId()
                    )
                } catch (e: Exception) {
                    status = PurchaseStatus.CANCELED
                    e.printStackTrace()
                    return@launch
                }

                Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ $profitSellPrice")
                status = PurchaseStatus.ORDER_SELL
            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }

    fun sellWithTrailing(): Job? {
        val figi = stock.figi
        val ticker = stock.ticker

        val pos = depositManager.getPositionForFigi(figi)
        if (pos == null || pos.lots == 0 || percentProfitSellFrom == 0.0) {
            status = PurchaseStatus.CANCELED
            return null
        }

        return GlobalScope.launch(StockManager.stockContext) {
            try {
                position = pos
                currentTrailingStop = TrailingStop(stock, stock.getPriceNow(), trailingStopTakeProfitPercentActivation, trailingStopTakeProfitPercentDelta, trailingStopStopLossPercent)
                currentTrailingStop?.let {
                    strategyTrailingStop.addTrailingStop(it)
                    status = PurchaseStatus.ORDER_SELL_TRAILING

                    // –≤—Å—è –ª–æ–≥–∏–∫–∞ –¢–° —Ç—É—Ç, –æ—á–µ–Ω—å –¥–æ–ª–≥–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                    var profitSellPrice = it.process()
                    strategyTrailingStop.removeTrailingStop(it)

                    status = PurchaseStatus.ORDER_SELL_PREPARE
                    if (profitSellPrice == 0.0) return@launch

                    profitSellPrice = Utils.makeNicePrice(profitSellPrice, stock)
                    try { // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                        sellLimitOrder = ordersService.placeLimitOrder(
                            lots,
                            figi,
                            profitSellPrice,
                            OperationType.SELL,
                            depositManager.getActiveBrokerAccountId()
                        )
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                    Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ $profitSellPrice")
                    status = PurchaseStatus.ORDER_SELL
                }
            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }

    fun getProfitPriceForSell(): Double {
        position?.let { // –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∞, –±–µ—Ä—ë–º —Å—Ä–µ–¥–Ω—é—é
            val avg = it.getAveragePrice()
            val priceProfit = avg + avg / 100.0 * percentProfitSellFrom
            return Utils.makeNicePrice(priceProfit, stock)
        }

        // –∏–Ω–∞—á–µ –±–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –±—É–º–∞–≥–∏
        val priceProfit = stock.getPriceNow() + stock.getPriceNow() / 100.0 * percentProfitSellFrom
        return Utils.makeNicePrice(priceProfit, stock)
    }

    fun processInitialProfit() {
        percentProfitSellFrom = SettingsManager.get1000SellTakeProfit()

        position?.let {
            // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∑—è—Ç—å –ø—Ä–æ—Ñ–∏—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            var futureProfit = SettingsManager.get1000SellTakeProfit()

            // –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —Ç–æ 1% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (futureProfit == 0.0) futureProfit = 1.0

            // –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç —É–∂–µ –±–æ–ª—å—à–µ, —Ç–æ –∑–∞ –±–∞–∑–æ–≤—ã–π –≤–∑—è—Ç—å –µ–≥–æ
            val change = it.getProfitAmount()
            val totalCash = it.balance * it.getAveragePrice()
            val currentProfit = (100.0 * change) / totalCash

            percentProfitSellFrom = if (currentProfit > futureProfit) currentProfit else futureProfit
        }
        status = PurchaseStatus.WAITING
    }

    fun sellShortToBid2225(): Job? {
        if (lots == 0) return null

        return GlobalScope.launch(Dispatchers.Main) {
            try {
                val ticker = stock.ticker
                val figi = stock.figi

                var sellPrice: Double = 0.0
                try {
                    status = PurchaseStatus.ORDER_SELL_PREPARE
                    val orderbook = marketService.orderbook(figi, 10)
                    sellPrice = orderbook.getBestPriceFromBid(lots)
                    if (sellPrice == 0.0) return@launch

                    sellLimitOrder = ordersService.placeLimitOrder(
                        lots,
                        figi,
                        sellPrice,
                        OperationType.SELL,
                        depositManager.getActiveBrokerAccountId()
                    )
                    status = PurchaseStatus.ORDER_SELL
                } catch (e: Exception) {
                    status = PurchaseStatus.CANCELED
                    e.printStackTrace()
                    Utils.showToastAlert("$ticker: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —à–æ—Ä—Ç–∞ –ø–æ —Ü–µ–Ω–µ $sellPrice")
                    return@launch
                }

                Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ $sellPrice")
                delay(DelayFast)

                // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Ç–∏–∫–µ—Ä
                var position: PortfolioPosition?
                while (true) {
                    try {
                        depositManager.refreshDeposit()
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }

                    position = depositManager.getPositionForFigi(figi)
                    if (position != null && abs(position.lots) >= lots) {
                        status = PurchaseStatus.BOUGHT
                        Utils.showToastAlert("$ticker: –ø—Ä–æ–¥–∞–Ω–æ!")
                        break
                    }

                    delay(DelayLong)
                }

//                if (trailingStop) { // –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
//                    currentTrailingStop = TrailingStop(stock, sellPrice, trailingStopTakeProfitPercentActivation, trailingStopTakeProfitPercentDelta, trailingStopStopLossPercent)
//                    currentTrailingStop?.let {
//                        strategyTrailingStop.addTrailingStop(it)
//                        status = PurchaseStatus.ORDER_SELL_TRAILING
//
//                        // –≤—Å—è –ª–æ–≥–∏–∫–∞ –¢–° —Ç—É—Ç, –æ—á–µ–Ω—å –¥–æ–ª–≥–∏–π –ø—Ä–æ—Ü–µ—Å—Å
//                        var profitSellPrice = it.process()
//                        strategyTrailingStop.removeTrailingStop(it)
//
//                        status = PurchaseStatus.ORDER_SELL_PREPARE
//                        if (profitSellPrice == 0.0) return@launch
//
//                        if (SettingsManager.getTrailingStopSellBestBid()) { // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –≤ –ª—É—á—à–∏–π –±–∏–¥
//                            val orderbook = marketService.orderbook(figi, 5)
//                            profitSellPrice = orderbook.getBestPriceFromBid(lots)
//                        }
//                        if (profitSellPrice == 0.0) return@launch
//
//                        try {
//                            profitSellPrice = Utils.makeNicePrice(profitSellPrice)
//                            sellLimitOrder = ordersService.placeLimitOrder(
//                                lots,
//                                figi,
//                                profitSellPrice,
//                                OperationType.SELL,
//                                depositManager.getActiveBrokerAccountId()
//                            )
//                            status = PurchaseStatus.ORDER_SELL
//                        } catch (e: Exception) {
//                            e.printStackTrace()
//                            status = PurchaseStatus.ERROR_NEED_WATCH
//                        }
//                    }
//                } else { // –æ—Ç–∫—É–ø 2225 –ª–µ—Å–µ–Ω–∫–æ–π
                    position?.let {
                        val totalLots = abs(it.lots)
                        val profitFrom = if (percentProfitSellFrom != 0.0) percentProfitSellFrom else SettingsManager.get2225TakeProfitFrom()
                        val profitTo = if (percentProfitSellTo != 0.0) percentProfitSellTo else SettingsManager.get2225TakeProfitTo()

                        val profitStep = SettingsManager.get2225TakeProfitStep()

                        // –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫–∏
                        if (profitTo < profitFrom || profitStep == 0 || profitFrom == 0.0 || profitTo == 0.0) return@launch

                        val list: MutableList<Pair<Int, Double>> = mutableListOf()
                        when (profitStep) {
                            1 -> { // –µ—Å–ª–∏ —à–∞–≥ 1, —Ç–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∏–∂–Ω–∏–π % –∏ –≤—Å—ë
                                list.add(Pair(totalLots, profitFrom))
                            }
                            2 -> { // –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
                                val partLots1 = totalLots / 2
                                val partLots2 = totalLots - partLots1
                                list.add(Pair(partLots1, profitFrom))
                                list.add(Pair(partLots2, profitTo))
                            }
                            else -> { // –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ
                                val profitStepDouble: Double = profitStep.toDouble()
                                val delta = (profitTo - profitFrom) / (profitStep - 1)

                                // –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–û–ª—å—à—É—é, —á—Ç–æ–±—ã –Ω–∞–ø–æ—Å–ª–µ–¥–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –ª–æ—Ç–æ–≤
                                val basePartLots: Int = ceil(totalLots / profitStepDouble).toInt()

                                var currentLots = basePartLots
                                var currentProfit = profitFrom

                                // —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç
                                list.add(Pair(basePartLots, currentProfit))

                                var step = profitStep - 2
                                while (step > 0) {
                                    if (currentLots + basePartLots > totalLots) {
                                        break
                                    }
                                    currentLots += basePartLots
                                    currentProfit += delta
                                    list.add(Pair(basePartLots, currentProfit))
                                    step--
                                }

                                // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç
                                val lastPartLots = totalLots - currentLots
                                if (lastPartLots > 0) {
                                    list.add(Pair(lastPartLots, profitTo))
                                }
                            }
                        }

                        if (list.isEmpty()) return@launch

                        status = PurchaseStatus.ORDER_BUY_PREPARE
                        for (p in list) {
                            val lotsStep = p.first
                            val profit = p.second

                            // –≤—ã—á–∏—Å–ª—è–µ–º –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                            var profitPrice = sellPrice - sellPrice / 100.0 * profit
                            profitPrice = Utils.makeNicePrice(profitPrice, stock)

                            if (lotsStep <= 0 || profitPrice == 0.0) continue

                            // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Ç–∫—É–ø
                            try {
                                buyLimitOrder = ordersService.placeLimitOrder(
                                    lotsStep,
                                    figi,
                                    profitPrice,
                                    OperationType.BUY,
                                    depositManager.getActiveBrokerAccountId()
                                )
                                status = PurchaseStatus.ORDER_BUY
                            } catch (e: Exception) {
                                status = PurchaseStatus.ERROR_NEED_WATCH
                                e.printStackTrace()
                            }
                            delay(DelayFast)
                        }
                        Utils.showToastAlert("$ticker: –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—É–ø –æ—Ç $percentProfitSellFrom% –¥–æ $percentProfitSellTo%")
                    }
//                }

                while (true) {
                    delay(DelayLong * 5)
                    if (depositManager.getPositionForFigi(figi) == null) { // –ø—Ä–æ–¥–∞–Ω–æ!
                        status = PurchaseStatus.SOLD
                        Utils.showToastAlert("$ticker: –∑–∞—à–æ—Ä—á–µ–Ω–æ!")
                        break
                    }
                }
            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                currentTrailingStop?.let {
                    strategyTrailingStop.removeTrailingStop(it)
                }
                e.printStackTrace()
            }
        }
    }
}
