package com.project.ti2358.data.manager

import com.project.ti2358.data.model.dto.*
import com.project.ti2358.data.service.*
import com.project.ti2358.service.Utils
import com.project.ti2358.service.log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import org.koin.core.component.KoinApiExtension
import org.koin.core.component.KoinComponent
import org.koin.core.component.inject
import kotlin.math.ceil

enum class PurchaseStatus {
    NONE,
    ORDER_BUY_PREPARE,
    ORDER_BUY,
    BUYED,
    ORDER_SELL_PREPARE,
    ORDER_SELL,
    WAITING,
    SELLED,
    CANCELED,
}

@KoinApiExtension
data class PurchaseStock(
    var stock: Stock
) : KoinComponent {
    private val ordersService: OrdersService by inject()
    private val depositManager: DepositManager by inject()
    private val marketService: MarketService by inject()

    var percentLimitPriceChange: Double = 0.0         // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ % —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–º–∏—Ç–∫–∏
    var absoluteLimitPriceChange: Double = 0.0        // –µ—Å–ª–∏ –ª–∏–º–∏—Ç–∫–∞, —Ç–æ –ø–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ

    var lots: Int = 0                   // —Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —Ç–∞—Ä–∏–º
    var status: PurchaseStatus = PurchaseStatus.NONE

    var buyMarketOrder: MarketOrder? = null
    var buyLimitOrder: LimitOrder? = null

    var sellLimitOrder: LimitOrder? = null

    var percentSellFrom: Double = 0.0
    var percentSellTo: Double = 0.0

    companion object {
        val DelayFast: Long = 200
        val DelayLong: Long = 2000
    }

    fun getPriceString(): String {
        return "%.1f$".format(stock.getPriceDouble() * lots)
    }

    fun getStatusString(): String =
        when (status) {
            PurchaseStatus.NONE -> ""
            PurchaseStatus.WAITING -> "–∂–¥—ë–º ‚è≥"
            PurchaseStatus.ORDER_BUY_PREPARE -> "–æ—Ä–¥–µ—Ä: –¥–æ –ø–æ–∫—É–ø–∫–∏"
            PurchaseStatus.ORDER_BUY -> "–æ—Ä–¥–µ—Ä: –ø–æ–∫—É–ø–∫–∞"
            PurchaseStatus.BUYED -> "–∫—É–ø–ª–µ–Ω–æ! üí∏"
            PurchaseStatus.ORDER_SELL_PREPARE -> "–æ—Ä–¥–µ—Ä: –¥–æ –ø—Ä–æ–¥–∞–∂–∏"
            PurchaseStatus.ORDER_SELL -> "–æ—Ä–¥–µ—Ä: –ø—Ä–æ–¥–∞–∂–∞ üôã"
            PurchaseStatus.SELLED -> "–ø—Ä–æ–¥–∞–Ω–æ! ü§ë"
            PurchaseStatus.CANCELED -> "–æ—Ç–º–µ–Ω–µ–Ω–∞! —à–æ–∫, —Å–∫—Ä–∏–Ω—å! üò±"
        }

    fun getLimitPriceDouble(): Double {
        val price = stock.getPriceDouble() + absoluteLimitPriceChange
        return Utils.makeNicePrice(price)
    }

    fun addPriceLimitPercent(change: Double) {
        percentLimitPriceChange += change
        updateAbsolutePrice()
    }

    fun updateAbsolutePrice() {
        absoluteLimitPriceChange = stock.getPriceDouble() / 100 * percentLimitPriceChange
        absoluteLimitPriceChange = Utils.makeNicePrice(absoluteLimitPriceChange)
    }

    fun addPriceProfit2358Percent(change: Double) {
        percentSellFrom += change
        percentSellTo += change
    }

    fun buyMarket(price: Double) {
        if (lots == 0) return

        val sellPrice = Utils.makeNicePrice(price)

        GlobalScope.launch(Dispatchers.Main) {
            try {
                while (true) {
                    try {
                        status = PurchaseStatus.ORDER_BUY_PREPARE
                        buyMarketOrder = ordersService.placeMarketOrder(
                            lots,
                            stock.marketInstrument.figi,
                            OperationType.BUY,
                            depositManager.getActiveBrokerAccountId()
                        )
                        status = PurchaseStatus.ORDER_BUY
                        break
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                    delay(DelayFast)
                }

                // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Ç–∏–∫–µ—Ä
                var position: PortfolioPosition? = null
                var counter = 50
                while (counter > 0) {
                    depositManager.refreshDeposit()

                    position = depositManager.getPositionForFigi(stock.marketInstrument.figi)
                    if (position != null && position.lots >= lots) { // –∫—É–ø–ª–µ–Ω–æ!
                        status = PurchaseStatus.BUYED
                        break
                    }

                    delay(DelayLong)
                    counter--
                }

                // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                while (true) {
                    try {
                        status = PurchaseStatus.ORDER_SELL_PREPARE
                        position?.let {
                            sellLimitOrder = ordersService.placeLimitOrder(
                                it.lots,
                                stock.marketInstrument.figi,
                                sellPrice,
                                OperationType.SELL,
                                depositManager.getActiveBrokerAccountId()
                            )
                        }
                        status = PurchaseStatus.ORDER_SELL
                        break
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                    delay(DelayFast)
                }

                while (true) {
                    delay(DelayLong)

                    position = depositManager.getPositionForFigi(stock.marketInstrument.figi)
                    if (position == null) { // –ø—Ä–æ–¥–∞–Ω–æ!
                        status = PurchaseStatus.SELLED
                        break
                    }
                }

            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }

    fun buyLimitFromBid(price: Double, profit: Double) {
        if (lots == 0) return

        val buyPrice = Utils.makeNicePrice(price)

        GlobalScope.launch(Dispatchers.Main) {
            try {

                while (true) {
                    try {
                        status = PurchaseStatus.ORDER_BUY_PREPARE
                        buyLimitOrder = ordersService.placeLimitOrder(
                            lots,
                            stock.marketInstrument.figi,
                            buyPrice,
                            OperationType.BUY,
                            depositManager.getActiveBrokerAccountId()
                        )
                        status = PurchaseStatus.ORDER_BUY
                        break
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                    delay(DelayFast)
                }

                val ticker = stock.marketInstrument.ticker
                Utils.showToastAlert("$ticker: –ø–æ–∫—É–ø–∫–∞ –ø–æ $buyPrice")

                delay(DelayFast)

                // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Ç–∏–∫–µ—Ä
                var position: PortfolioPosition? = null
                var counter = 50
                while (counter > 0) {
                    try {
                        depositManager.refreshDeposit()
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }

                    position = depositManager.getPositionForFigi(stock.marketInstrument.figi)
                    if (position != null && position.lots >= lots) { // –∫—É–ø–ª–µ–Ω–æ!
                        status = PurchaseStatus.BUYED
                        break
                    }

                    delay(DelayLong)
                    counter--
                }

                // –ø—Ä–æ–¥–∞—ë–º
                position?.let {
                    if (profit == 0.0) return@launch

                    // –≤—ã—á–∏—Å–ª—è–µ–º –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    if (buyPrice == 0.0) return@launch

                    var profitPrice = buyPrice + buyPrice / 100.0 * profit
                    profitPrice = Utils.makeNicePrice(profitPrice)
                    if (profitPrice == 0.0) return@launch

                    // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                    while (true) {
                        try {
                            status = PurchaseStatus.ORDER_SELL_PREPARE
                            sellLimitOrder = ordersService.placeLimitOrder(
                                it.lots,
                                stock.marketInstrument.figi,
                                profitPrice,
                                OperationType.SELL,
                                depositManager.getActiveBrokerAccountId()
                            )
                            status = PurchaseStatus.ORDER_SELL
                            Utils.showToastAlert("$ticker: –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ $profitPrice")
                            break
                        } catch (e: Exception) {
                            e.printStackTrace()
                        }
                        delay(DelayFast)
                    }
                }

                while (true) {
                    delay(DelayLong)

                    position = depositManager.getPositionForFigi(stock.marketInstrument.figi)
                    if (position == null) { // –ø—Ä–æ–¥–∞–Ω–æ!
                        status = PurchaseStatus.SELLED
                        Utils.showToastAlert("$ticker: –ø—Ä–æ–¥–∞–Ω–æ!")
                        break
                    }
                }

            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }

    fun buyLimitFromAsk(profit: Double) {
        if (lots == 0) return

        GlobalScope.launch(Dispatchers.Main) {
            try {
                val ticker = stock.marketInstrument.ticker

                // –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω
                val orderbook = marketService.orderbook(stock.marketInstrument.figi, 5)

                val buyPrice = orderbook.getBestPriceFromAsk(lots)
                log("$orderbook")

                while (true) {
                    try {
                        status = PurchaseStatus.ORDER_BUY_PREPARE
                        buyLimitOrder = ordersService.placeLimitOrder(
                            lots,
                            stock.marketInstrument.figi,
                            buyPrice,
                            OperationType.BUY,
                            depositManager.getActiveBrokerAccountId()
                        )
                        status = PurchaseStatus.ORDER_BUY
                        break
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                    delay(DelayFast)
                }

                Utils.showToastAlert("$ticker: –ø–æ–∫—É–ø–∫–∞ –ø–æ $buyPrice")
                delay(DelayFast)

                // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Ç–∏–∫–µ—Ä
                var position: PortfolioPosition?
                while (true) {
                    try {
                        depositManager.refreshDeposit()
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }

                    position = depositManager.getPositionForFigi(stock.marketInstrument.figi)
                    if (position != null && position.lots >= lots) { // –∫—É–ø–ª–µ–Ω–æ!
                        status = PurchaseStatus.BUYED
                        Utils.showToastAlert("$ticker: –∫—É–ø–ª–µ–Ω–æ!")
                        break
                    }

                    delay(DelayLong)
                }

                // –ø—Ä–æ–¥–∞—ë–º
                position?.let {
                    if (profit == 0.0) return@launch

                    // –≤—ã—á–∏—Å–ª—è–µ–º –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    if (buyPrice == 0.0) return@launch

                    var profitPrice = buyPrice + buyPrice / 100.0 * profit
                    profitPrice = Utils.makeNicePrice(profitPrice)
                    if (profitPrice == 0.0) return@launch

                    // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                    while (true) {
                        try {
                            status = PurchaseStatus.ORDER_SELL_PREPARE
                            sellLimitOrder = ordersService.placeLimitOrder(
                                it.lots,
                                stock.marketInstrument.figi,
                                profitPrice,
                                OperationType.SELL,
                                depositManager.getActiveBrokerAccountId()
                            )
                            status = PurchaseStatus.ORDER_SELL
                            break
                        } catch (e: Exception) {
                            e.printStackTrace()
                        }
                        delay(DelayFast)
                    }

                    Utils.showToastAlert("$ticker: –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ $profitPrice")
                }

                while (true) {
                    delay(DelayLong)

                    position = depositManager.getPositionForFigi(stock.marketInstrument.figi)
                    if (position == null) { // –ø—Ä–æ–¥–∞–Ω–æ!
                        status = PurchaseStatus.SELLED
                        Utils.showToastAlert("$ticker: –ø—Ä–æ–¥–∞–Ω–æ!")
                        break
                    }
                }

            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }

    fun buyLimit2358() {
        if (lots == 0) return

        GlobalScope.launch(Dispatchers.Main) {
            try {
                var buyPrice = 0.0
                while (true) {
                    try {
                        status = PurchaseStatus.ORDER_BUY_PREPARE
                        // –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω
                        val orderbook = marketService.orderbook(stock.marketInstrument.figi, 5)
                        log("$orderbook")

                        buyPrice = orderbook.getBestPriceFromAsk(lots)
                        if (buyPrice == 0.0) return@launch

                        buyLimitOrder = ordersService.placeLimitOrder(
                            lots,
                            stock.marketInstrument.figi,
                            buyPrice,
                            OperationType.BUY,
                            depositManager.getActiveBrokerAccountId()
                        )
                        status = PurchaseStatus.ORDER_BUY
                        break
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                    delay(DelayFast)
                }

                val ticker = stock.marketInstrument.ticker
                Utils.showToastAlert("$ticker: –ø–æ–∫—É–ø–∫–∞ –ø–æ $buyPrice")

                delay(DelayFast)

                // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Ç–∏–∫–µ—Ä
                var position: PortfolioPosition?
                while (true) {
                    try {
                        depositManager.refreshDeposit()
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }

                    position = depositManager.getPositionForFigi(stock.marketInstrument.figi)
                    if (position != null && position.lots >= lots) { // –∫—É–ø–ª–µ–Ω–æ!
                        status = PurchaseStatus.BUYED
                        Utils.showToastAlert("$ticker: –∫—É–ø–ª–µ–Ω–æ!")
                        break
                    }

                    delay(DelayLong)
                }

                // –ø—Ä–æ–¥–∞—ë–º 2358 –ª–µ—Å–µ–Ω–∫–æ–π
                position?.let {
                    val totalLots = it.lots
                    var profitFrom = percentSellFrom
                    var profitTo = percentSellTo

                    if (profitFrom == 0.0) {
                        profitFrom = SettingsManager.get2358TakeProfitFrom()
                    }

                    if (profitTo == 0.0) {
                        profitTo = SettingsManager.get2358TakeProfitTo()
                    }

                    val profitStep = SettingsManager.get2358TakeProfitStep()

                    // –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫–∏
                    if (profitTo < profitFrom || profitStep == 0 || profitFrom == 0.0 || profitTo == 0.0) return@launch

                    val list: MutableList<Pair<Int, Double>> = mutableListOf()
                    when (profitStep) {
                        1 -> { // –µ—Å–ª–∏ —à–∞–≥ 1, —Ç–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∏–∂–Ω–∏–π % –∏ –≤—Å—ë
                            list.add(Pair(totalLots, profitFrom))
                        }
                        2 -> { // –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
                            val partLots1 = totalLots / 2
                            val partLots2 = totalLots - partLots1
                            list.add(Pair(partLots1, profitFrom))
                            list.add(Pair(partLots2, profitTo))
                        }
                        else -> { // –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ
                            val profitStepDouble: Double = profitStep.toDouble()
                            val delta = (profitTo - profitFrom) / (profitStep - 1)

                            // –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–û–ª—å—à—É—é, —á—Ç–æ–±—ã –Ω–∞–ø–æ—Å–ª–µ–¥–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –ª–æ—Ç–æ–≤
                            val basePartLots: Int = ceil(totalLots / profitStepDouble).toInt()

                            var currentLots = basePartLots
                            var currentProfit = profitFrom

                            // —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç
                            list.add(Pair(basePartLots, currentProfit))

                            var step = profitStep - 2
                            while (step > 0) {
                                if (currentLots + basePartLots > totalLots) {
                                    break
                                }
                                currentLots += basePartLots
                                currentProfit += delta
                                list.add(Pair(basePartLots, currentProfit))
                                step--
                            }

                            // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç
                            val lastPartLots = totalLots - currentLots
                            if (lastPartLots > 0) {
                                list.add(Pair(lastPartLots, profitTo))
                            }
                        }
                    }

                    if (list.isEmpty()) return@launch

                    status = PurchaseStatus.ORDER_SELL_PREPARE
                    for (p in list) {
                        val lots = p.first
                        val profit = p.second

                        // –≤—ã—á–∏—Å–ª—è–µ–º –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                        var profitPrice = buyPrice + buyPrice / 100.0 * profit
                        profitPrice = Utils.makeNicePrice(profitPrice)

                        if (lots <= 0 || profitPrice == 0.0) continue

                        // –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                        while (true) {
                            try {
                                sellLimitOrder = ordersService.placeLimitOrder(
                                    lots,
                                    stock.marketInstrument.figi,
                                    profitPrice,
                                    OperationType.SELL,
                                    depositManager.getActiveBrokerAccountId()
                                )
                                break
                            } catch (e: Exception) {
                                e.printStackTrace()
                            }
                            delay(DelayFast)
                        }
                    }
                    status = PurchaseStatus.ORDER_SELL
                    Utils.showToastAlert("$ticker: –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ $profitFrom")
                }

                while (true) {
                    delay(DelayLong)

                    position = depositManager.getPositionForFigi(stock.marketInstrument.figi)
                    if (position == null) { // –ø—Ä–æ–¥–∞–Ω–æ!
                        status = PurchaseStatus.SELLED
                        Utils.showToastAlert("$ticker: –ø—Ä–æ–¥–∞–Ω–æ!")
                        break
                    }
                }

            } catch (e: Exception) {
                status = PurchaseStatus.CANCELED
                e.printStackTrace()
            }
        }
    }
}
